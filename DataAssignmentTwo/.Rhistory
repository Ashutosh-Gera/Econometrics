sum(is.na(finalDataSet$percentagePoverty))
finalDataSet$literacyRate <- as.numeric(gsub("%", "", finalDataSet$literacyRate))/100
model <- lm(Amount.of.Hydrogencarbonate ~ SDP + Ginni.Index + sdp2 + sdp3 + MarginOfVictory + percentagePoverty + HDI + literacyRate, data = finalDataSet)
summary(model)
district_final_model <- lm(Amount.of.Hydrogencarbonate ~ SDP + Ginni.Index + sdp2 + sdp3 + MarginOfVictory + percentagePoverty + HDI + literacyRate, data = finalDataSet)
summary(district_final_model)
#Also, making state level dataset
library(dplyr)
state_data <- finalDataSet %>%
group_by(State) %>%
summarise_all(mean, na.rm=TRUE)
View(state_data)
# group data by State and YearCode
finalDataSet_grouped <- finalDataSet %>% group_by(State, YearCode)
# calculate average for each group while excluding YearCode
state_data <- finalDataSet_grouped %>%
summarise(across(-YearCode, mean, na.rm = TRUE)) %>%
ungroup()
View(finalDataSet_grouped)
mydata_state <- finalDataSet %>%
group_by(State, YearCode) %>%
summarise(across(c(SDP, sdp2, sdp3, Ginni.Index, HDI, MarginOfVictory, percentagePoverty, literacyRate), mean, na.rm = TRUE)) %>%
ungroup() %>%
mutate(YearCode = as.factor(YearCode))
mydata_state
View(mydata_state)
mydata_state <- finalDataSet %>%
group_by(State, YearCode) %>%
summarise(across(c(Amount.of.Hydrogencarbonate, SDP, sdp2, sdp3, Ginni.Index, HDI, MarginOfVictory, percentagePoverty, literacyRate), mean, na.rm = TRUE)) %>%
ungroup() %>%
mutate(YearCode = as.factor(YearCode))
View(mydata_state)
state_data <- finalDataSet %>%
group_by(State, YearCode) %>%
summarise(across(c(Amount.of.Hydrogencarbonate, SDP, sdp2, sdp3, Ginni.Index, HDI, MarginOfVictory, percentagePoverty, literacyRate), mean, na.rm = TRUE)) %>%
ungroup() %>%
mutate(YearCode = as.factor(YearCode))
View(state_data)
state_final_model <- lm(Amount.of.Hydrogencarbonate ~ SDP + Ginni.Index + sdp2 + sdp3 + MarginOfVictory + percentagePoverty + HDI + literacyRate, data = finalDataSet)
summary(state_final_model)
state_final_model <- lm(Amount.of.Hydrogencarbonate ~ SDP + Ginni.Index + sdp2 + sdp3 + MarginOfVictory + percentagePoverty + HDI + literacyRate, data = state_data)
summary(state_final_model)
state_final_model <- lm(Amount.of.Hydrogencarbonate ~ SDP + Ginni.Index + sdp2 + sdp3 + MarginOfVictory + percentagePoverty + HDI + literacyRate, data = state_data)
summary(state_final_model)
state_data_new <- state_data
state_data_new$Ginni.Index <- NA
View(state_data_new)
gini <- read.csv("/home/ashu/Desktop/sem4/econometrics/DataAssignmentTwo/gini-Statewise - gini_2005_2015.csv")
View(gini)
for(i in 1:nrow(state_data_new)){
if(state_data_new$State[i] %in% gini$State & state_data_new$YearCode[i] >= 2000 & state_data_new$YearCode[i] <= 2009){
state_data_new$Ginni.Index[i] <- gini$`X2005`[gini$State == state_data_new$State[i]]
}
}
library(dplyr)
state_data_new <- state_data_new %>%
left_join(gini %>% select(State, `X2005`), by = "State") %>%
mutate(Gini.Index = ifelse(YearCode >= 2000 & YearCode <= 2009, `X2005`, Gini.Index))
state_data_new <- state_data_new %>%
left_join(gini %>% select(State, `X2005`), by = "State") %>%
mutate(Ginni.Index = ifelse(YearCode >= 2000 & YearCode <= 2009, `X2005`, Ginni.Index))
state_data_new <- state_data
state_data_new$Ginni.Index <- NA
gini <- read.csv("/home/ashu/Desktop/sem4/econometrics/DataAssignmentTwo/gini-Statewise - gini_2005_2015.csv")
View(gini)
for(i in 1:nrow(state_data_new)){
if(state_data_new$State[i] %in% gini$State & state_data_new$YearCode[i] >= 2000 & state_data_new$YearCode[i] <= 2009){
state_data_new$Ginni.Index[i] <- gini$`X2005`[gini$State == state_data_new$State[i]]
}
}
View(state_data_new)
state_data_new <- state_data
state_data_new$Ginni.Index <- NA
state_data_new <- state_data_new %>%
ungroup(State, YearCode)
gini <- read.csv("/home/ashu/Desktop/sem4/econometrics/DataAssignmentTwo/gini-Statewise - gini_2005_2015.csv")
View(gini)
for(i in 1:nrow(state_data_new)){
if(state_data_new$State[i] %in% gini$State & state_data_new$YearCode[i] >= 2000 & state_data_new$YearCode[i] <= 2009){
state_data_new$Ginni.Index[i] <- gini$`X2005`[gini$State == state_data_new$State[i]]
}
}
state_data_new <- state_data
state_data_new$Ginni.Index <- NA
state_data_new <- state_data_new %>%
ungroup()
gini <- read.csv("/home/ashu/Desktop/sem4/econometrics/DataAssignmentTwo/gini-Statewise - gini_2005_2015.csv")
for(i in 1:nrow(state_data_new)){
if(state_data_new$State[i] %in% gini$State & state_data_new$YearCode[i] >= 2000 & state_data_new$YearCode[i] <= 2009){
state_data_new$Ginni.Index[i] <- gini$`X2005`[gini$State == state_data_new$State[i]]
}
}
state_data_new <- state_data
state_data_new$Ginni.Index <- NA
gini <- read.csv("/home/ashu/Desktop/sem4/econometrics/DataAssignmentTwo/gini-Statewise - gini_2005_2015.csv")
state_data_new$YearCode <- as.integer(state_data_new$YearCode)
for(i in 1:nrow(state_data_new)){
if(state_data_new$State[i] %in% gini$State & state_data_new$YearCode[i] >= 2000 & state_data_new$YearCode[i] <= 2009){
state_data_new$Ginni.Index[i] <- gini$`X2005`[gini$State == state_data_new$State[i]]
}
}
for(i in 1:nrow(state_data_new)){
if(state_data_new$State[i] %in% gini$State & state_data_new$YearCode[i] >= 2000 & state_data_new$YearCode[i] <= 2009){
state_data_new$Ginni.Index[i] <- gini$`X2005`[gini$State == state_data_new$State[i]]
}
}
View(state_data_new)
state_data_new <- state_data
state_data_new$Ginni.Index <- NA
state_data_new$YearCode <- as.numeric(state_data_new$YearCode)
state_data_new <- state_data
state_data_new$Ginni.Index <- NA
gini <- read.csv("/home/ashu/Desktop/sem4/econometrics/DataAssignmentTwo/gini-Statewise - gini_2005_2015.csv")
state_data_new <- state_data
state_data_new$Ginni.Index <- NA
gini <- read.csv("/home/ashu/Desktop/sem4/econometrics/DataAssignmentTwo/gini-Statewise - gini_2005_2015.csv")
state_data_new$YearCode <- as.numeric(as.character(state_data_new$YearCode))
for(i in 1:nrow(state_data_new)){
if(state_data_new$State[i] %in% gini$State & state_data_new$YearCode[i] >= 2000 & state_data_new$YearCode[i] <= 2009){
state_data_new$Ginni.Index[i] <- gini$`X2005`[gini$State == state_data_new$State[i]]
}
}
for(i in 1:nrow(state_data_new)){
if(state_data_new$State[i] %in% gini$State & state_data_new$YearCode[i] >= 2010 & state_data_new$YearCode[i] <= 2018){
state_data_new$Ginni.Index[i] <- gini$`X2015`[gini$State == state_data_new$State[i]]
}
}
state_final_model_new <- lm(Amount.of.Hydrogencarbonate ~ SDP + Ginni.Index + sdp2 + sdp3 + MarginOfVictory + percentagePoverty + HDI + literacyRate, data = state_data_new)
summary(state_final_model_new)
any(is.na(state_data_new$Ginni.Index))
sum(is.na(state_data_new$Ginni.Index))
gini[31, 1] <- "Telangana"
gini[31, 3] <- 0.270
gini[31, 2] <- 0.394
for(i in 1:nrow(state_data_new)){
if(state_data_new$State[i] %in% gini$State & state_data_new$YearCode[i] >= 2000 & state_data_new$YearCode[i] <= 2009){
state_data_new$Ginni.Index[i] <- gini$`X2005`[gini$State == state_data_new$State[i]]
}
}
for(i in 1:nrow(state_data_new)){
if(state_data_new$State[i] %in% gini$State & state_data_new$YearCode[i] >= 2010 & state_data_new$YearCode[i] <= 2018){
state_data_new$Ginni.Index[i] <- gini$`X2015`[gini$State == state_data_new$State[i]]
}
}
sum(is.na(state_data_new$Ginni.Index))
state_final_model_new <- lm(Amount.of.Hydrogencarbonate ~ SDP + Ginni.Index + sdp2 + sdp3 + MarginOfVictory + percentagePoverty + HDI + literacyRate, data = state_data_new)
summary(state_final_model_new)
install.packages("car")
write.csv(state_data, "finalStateData.csv", row.names = FALSE)
write.csv(state_data_new, "finalStateData.csv", row.names = FALSE)
library(car)
install.packages("car")
library(car)
install.packages("corrplot")
library(corrplot)
# Create a correlation matrix
cor_matrix <- cor(finalDataSet[,c("Amount.of.Hydrogencarbonate", "SDP", "Ginni.Index", "sdp2", "sdp3", "MarginOfVictory", "percentagePoverty", "HDI", "literacyRate")])
# Create a correlation matrix plot
corrplot(cor_matrix, method = "circle", type = "lower", order = "hclust", tl.cex = 0.7)
# Create a correlation matrix
cor_matrix <- rcor(finalDataSet[,c("Amount.of.Hydrogencarbonate", "SDP", "Ginni.Index", "sdp2", "sdp3", "MarginOfVictory", "percentagePoverty", "HDI", "literacyRate")])
# Create a correlation matrix
cor_matrix <- cor(finalDataSet[,c("Amount.of.Hydrogencarbonate", "SDP", "Ginni.Index", "sdp2", "sdp3", "MarginOfVictory", "percentagePoverty", "HDI", "literacyRate")])
any(is.na(finalDataSet))
# Create a correlation matrix plot
corrplot(cor_matrix, method = "circle", type = "lower", order = "hclust", tl.cex = 0.7)
corr[is.na(corr)] <- apply(corr, 2, mean, na.rm = TRUE)
cor_matrix[is.na(cor_matrix)] <- apply(cor_matrix, 2, mean, na.rm = TRUE)
# Create a correlation matrix plot
corrplot(cor_matrix, method = "circle", type = "lower", order = "hclust", tl.cex = 0.7)
cor_matrix_state <- cor(state_data_new[,c("Amount.of.Hydrogencarbonate", "SDP", "Ginni.Index", "sdp2", "sdp3", "MarginOfVictory", "percentagePoverty", "HDI", "literacyRate")])
cor_matrix_state[is.na(cor_matrix_state)] <- apply(cor_matrix_state, 2, mean, na.rm = TRUE)
# Create a correlation matrix plot
corrplot(cor_matrix_state, method = "circle", type = "lower", order = "hclust", tl.cex = 0.7)
# Create a correlation matrix plot
corrplot(cor_matrix_state, method = "ellipse", type = "lower", order = "hclust", tl.cex = 0.7)
# Create a correlation matrix plot
corrplot(cor_matrix_state, method = "circle", type = "lower", order = "hclust", tl.cex = 0.7)
# Create a correlation matrix plot
corrplot(cor_matrix, method = "circle", type = "lower", order = "hclust", tl.cex = 0.7)
# Create a correlation matrix plot
corrplot(cor_matrix_state, method = "circle", type = "lower", order = "hclust", tl.cex = 0.7)
# Create a correlation matrix plot
corrplot(cor_matrix_state, method = "circle", type = "lower", order = "hclust", tl.cex = 0.7)
# Create a correlation matrix plot
corrplot(cor_matrix, method = "circle", type = "lower", order = "hclust", tl.cex = 0.7)
# Create a correlation matrix plot
corrplot(cor_matrix_state, method = "circle", type = "lower", order = "hclust", tl.cex = 0.7)
# Create a correlation matrix plot
corrplot(cor_matrix_state, method = "circle", type = "lower", order = "hclust", tl.cex = 0.7)
# Create interaction term between percentagePoverty and literacyRate
state_data_new$Poverty_Literacy <- state_data_new$percentagePoverty * state_data_new$literacyRate
# Create interaction term between literacyRate and HDI
state_data_new$Literacy_HDI <- state_data_new$literacyRate * state_data_new$HDI
# Run the new regression model with interaction terms
lm_new <- lm(Amount.of.Hydrogencarbonate ~ SDP + Ginni.Index + sdp2 + sdp3 + MarginOfVictory + percentagePoverty + HDI + literacyRate + Poverty_Literacy + Literacy_HDI, data = state_data_new)
# Print the summary of the new regression model
summary(lm_new)
install.packages("mgcv")
#estimating non-linear relationsips
library(mgcv)
# Fit GAM model
gam_model <- gam(Amount.of.Hydrogencarbonate ~ s(SDP), data = state_data_new)
# Summary of GAM model
summary(gam_model)
# Plot estimated function
plot(gam_model)
# Fit GAM model
gam_model <- gam(Amount.of.Hydrogencarbonate ~ s(SDP,sdp2), data = state_data_new)
# Summary of GAM model
summary(gam_model)
# Plot estimated function
plot(gam_model)
# Fit GAM model
gam_model <- gam(Amount.of.Hydrogencarbonate ~ s(SDP,sdp2, sdp3, Ginni.Index, percentagePoverty, MarginOfVictory, HDI, literacyRate), data = state_data_new)
# Fit GAM model
gam_model <- gam(Amount.of.Hydrogencarbonate ~ s(SDP,sdp2, sdp3, Ginni.Index, percentagePoverty, MarginOfVictory), data = state_data_new)
# Summary of GAM model
summary(gam_model)
# Plot estimated function
plot(gam_model)
# Fit GAM model
gam_model <- gam(Amount.of.Hydrogencarbonate ~ s(SDP), data = state_data_new)
# Summary of GAM model
summary(gam_model)
# Plot estimated function
plot(gam_model)
# Fit GAM model
gam_model <- gam(Amount.of.Hydrogencarbonate ~ s(Ginni.Index), data = state_data_new)
# Summary of GAM model
summary(gam_model)
# Plot estimated function
plot(gam_model)
# Fit GAM model
gam_model <- gam(Amount.of.Hydrogencarbonate ~ s(percentagePoverty), data = state_data_new)
# Summary of GAM model
summary(gam_model)
# Plot estimated function
plot(gam_model)
# Fit GAM model
gam_model <- gam(Amount.of.Hydrogencarbonate ~ s(SDP), data = state_data_new)
# Summary of GAM model
summary(gam_model)
# Plot estimated function
plot(gam_model)
# fit a GAM model with splines for non-linear relationships
model <- gam(Amount.of.Hydrogencarbonate ~ s(SDP) + s(Ginni.Index) + s(percentagePoverty) + s(MarginOfVictory) + s(HDI) + s(literacyRate), data = state_data_new)
# summary of the model
summary(model)
plot(model)
plot(model)
# fit a GAM model with splines for non-linear relationships
gam_model <- gam(Amount.of.Hydrogencarbonate ~ s(SDP) + s(Ginni.Index) + s(percentagePoverty) + s(MarginOfVictory) + s(HDI) + s(literacyRate) + s(sdp2) + s(sdp3) + s(Poverty_Literacy) + s(Literacy_HDI), data = state_data_new)
# summary of the model
summary(gam_model)
plot(gam_model)
plot(gam_model)
# Create a boxplot for each variable
boxplot(state_data_new$Amount.of.Hydrogencarbonate, state_data_new$SDP, state_data_new$Ginni.Index, state_data_new$percentagePoverty,
state_data_new$MarginOfVictory, state_data_new$HDI, state_data_new$literacyRate)
write.csv(state_data_new, "finalStateData.csv", row.names = FALSE)
# Create a boxplot with labeled axes and title
boxplot(state_data_new[c("SDP", "Ginni.Index", "percentagePoverty", "MarginOfVictory", "HDI", "literacyRate")],
main="Distribution of Variables", xlab="Variables", ylab="Values")
# Remove outliers beyond 3 standard deviations from the mean
outliers <- boxplot(state_data_new[c("SDP", "Ginni.Index", "percentagePoverty", "MarginOfVictory", "HDI", "literacyRate")],
plot=FALSE)$out
threshold <- mean(state_data_new[c("SDP", "Ginni.Index", "percentagePoverty", "MarginOfVictory", "HDI", "literacyRate")]) + 3 * sd(state_data_new[c("SDP", "Ginni.Index", "percentagePoverty", "MarginOfVictory", "HDI", "literacyRate")])
# Load the necessary library
library(dplyr)
# Create a new dataframe with only the variables of interest
data_of_interest <- state_data_new %>%
select(SDP, Ginni.Index, percentagePoverty, MarginOfVictory, HDI, literacyRate)
state_data_new <- read.csv("/home/ashu/Desktop/sem4/econometrics/DataAssignmentTwo/finalStateData.csv")
# Load the necessary library
library(dplyr)
# Create a new dataframe with only the variables of interest
data_of_interest <- state_data_new %>%
select(SDP, Ginni.Index, percentagePoverty, MarginOfVictory, HDI, literacyRate)
# Create boxplots for each variable to visually inspect for outliers
boxplot(data_of_interest, main="Boxplot of Variables", ylab="Value", ylim=c(0,1))
# Calculate the z-score for each variable to identify potential outliers
z_scores <- data_of_interest %>%
mutate_all(scale) %>%
mutate_all(~abs(.) - 3 * mean(., na.rm=TRUE) / sd(., na.rm=TRUE)) %>%
rowwise() %>%
summarize(max_z_score = max(c_across(everything())))
# Identify any variables that have z-scores greater than 3 (indicating potential outliers)
outliers <- z_scores %>%
filter(max_z_score > 3) %>%
rownames_to_column(var = "Variable")
library(tidyverse)
install.packages("tidyverse")
library(tibble)
library(tidyverse)
# Select variables to check for outliers
vars <- c("SDP", "Ginni.Index", "percentagePoverty", "MarginOfVictory", "HDI", "literacyRate")
# Create a new data frame with only the selected variables
df <- state_data_new %>% select(vars)
# Rescale variables
df_scaled <- scale(df)
# Convert the scaled data frame back into a tibble
df_scaled_tibble <- as_tibble(df_scaled)
# Add variable names as a column
df_scaled_tibble <- df_scaled_tibble %>% rownames_to_column(var = "Variable")
# Create boxplots for each variable
df_scaled_tibble %>%
pivot_longer(cols = -Variable, names_to = "VariableType", values_to = "Value") %>%
ggplot(aes(x = VariableType, y = Value)) +
geom_boxplot() +
xlab("") +
ylab("Scaled Value") +
ggtitle("Boxplot of Scaled Variables") +
facet_wrap(~Variable, scales = "free")
# Create boxplots for each variable
df_scaled_tibble %>%
pivot_longer(cols = -Variable, names_to = "VariableType", values_to = "Value") %>%
ggplot(aes(x = VariableType, y = Value)) +
geom_boxplot() +
xlab("") +
ylab("Scaled Value") +
ggtitle("Boxplot of Scaled Variables") +
facet_wrap(~Variable, scales = "free")
# Create boxplots for each variable
df_scaled_tibble %>%
pivot_longer(cols = -Variable, names_to = "VariableType", values_to = "Value") %>%
ggplot(aes(x = VariableType, y = Value)) +
geom_boxplot() +
xlab("") +
ylab("Scaled Value") +
ggtitle("Boxplot of Scaled Variables") +
facet_wrap(~Variable, scales = "free")
# Select the columns of interest
cols_of_interest <- c("SDP", "Ginni.Index", "percentagePoverty", "MarginOfVictory", "HDI", "literacyRate", "Amount.of.Hydrogencarbonate")
# Create a boxplot for each column
boxplot(state_data_new[,cols_of_interest], col="lightblue", main="Boxplot of Variables")
for (col in cols_of_interest) {
q1 <- quantile(state_data_new[,col], 0.25)
q3 <- quantile(state_data_new[,col], 0.75)
iqr <- q3 - q1
lower_limit <- q1 - 1.5*iqr
upper_limit <- q3 + 1.5*iqr
# Count the number of outliers in the dataset for each variable
num_outliers <- sum(state_data_new[,col] < lower_limit | state_data_new[,col] > upper_limit)
outliers <- rbind(outliers, data.frame(variable=col, outlier_count=num_outliers))
}
# Print the results
if (nrow(outliers) > 0) {
cat("Outliers detected:\n")
print(outliers)
} else {
cat("No outliers detected.")
}
#Outliers detected for SDP, need to fix that
# will fix that by taking log of SDP everywhere
state_data_new$log_SDP <- log(state_data_new$SDP)
state_data_new$log_SDP2 <- log(state_data_new$sdp2)
state_data_new$log_SDP3 <- log(state_data_new$sdp3)
#Final lm
final_lm <- lm(Amount.of.Hydrogencarbonate ~ log_SDP + Ginni.Index + log_SDP2 + log_SDP3 + MarginOfVictory + percentagePoverty + HDI + literacyRate + Poverty_Literacy + Literacy_HDI, data = state_data_new)
# Print the summary of the new regression model
summary(final_lm)
#Final lm
final_lm <- lm(Amount.of.Hydrogencarbonate ~ log_SDP + Ginni.Index + sdp2 + sdp3 + MarginOfVictory + percentagePoverty + HDI + literacyRate + Poverty_Literacy + Literacy_HDI, data = state_data_new)
# Print the summary of the new regression model
summary(final_lm)
# final gam model
final_gam_model <- gam(Amount.of.Hydrogencarbonate ~ s(log_SDP) + s(Ginni.Index) + s(percentagePoverty) + s(MarginOfVictory) + s(HDI) + s(literacyRate) + s(sdp2) + s(sdp3) + s(Poverty_Literacy) + s(Literacy_HDI), data = state_data_new)
#estimating non-linear relationsips
library(mgcv)
library(dbplyr)
# final gam model
final_gam_model <- gam(Amount.of.Hydrogencarbonate ~ s(log_SDP) + s(Ginni.Index) + s(percentagePoverty) + s(MarginOfVictory) + s(HDI) + s(literacyRate) + s(sdp2) + s(sdp3) + s(Poverty_Literacy) + s(Literacy_HDI), data = state_data_new)
# summary of the model
summary(gam_model)
# summary of the model
summary(final_gam_model)
#Final lm
final_lm <- lm(Amount.of.Hydrogencarbonate ~ log_SDP + sdp2 + sdp3 + MarginOfVictory + percentagePoverty + HDI + literacyRate + Poverty_Literacy + Literacy_HDI, data = state_data_new)
# Print the summary of the new regression model
summary(final_lm)
#Final lm
final_lm <- lm(Amount.of.Hydrogencarbonate ~ log_SDP + sdp2 + sdp3 + HDI + literacyRate + Poverty_Literacy + Literacy_HDI, data = state_data_new)
# Print the summary of the new regression model
summary(final_lm)
#Final lm
final_lm <- lm(Amount.of.Hydrogencarbonate ~ log_SDP + Ginni.Index + sdp2 + sdp3 + MarginOfVictory + percentagePoverty + HDI + literacyRate + Poverty_Literacy + Literacy_HDI, data = state_data_new)
# Print the summary of the new regression model
summary(final_lm)
#Final lm
final_lm <- lm(Amount.of.Hydrogencarbonate ~ log_SDP + sdp2 + sdp3 + HDI + literacyRate + Literacy_HDI, data = state_data_new)
# Print the summary of the new regression model
summary(final_lm)
#Final lm
final_lm <- lm(Amount.of.Hydrogencarbonate ~ log_SDP + Ginni.Index + sdp2 + sdp3 + MarginOfVictory + percentagePoverty + HDI + literacyRate + Poverty_Literacy + Literacy_HDI, data = state_data_new)
# Print the summary of the new regression model
summary(final_lm)
library(usdm)
install.packages("usdm")
install.packages("usdm", dependencies = FALSE)
library(usdm)
install.packages("usdm")
install.packages("caret")
install.packages("usdm")
library(caret)
correlation_matrix <- cor(state_data_new[, -1])
highly_correlated <- findCorrelation(correlation_matrix, cutoff = 0.8)
highly_correlated <- findCorrelation(correlation_matrix, cutoff = 0.8)
vif_test <- na.omit(state_data_new) # remove missing values
# compute correlation matrix
correlation_matrix <- cor(vif_test[, c("log_SDP", "Ginni.Index", "sdp2", "sdp3", "MarginOfVictory", "percentagePoverty", "HDI", "literacyRate", "Poverty_Literacy", "Literacy_HDI")])
# compute VIF
vif <- 1/(1-correlation_matrix)^2
# print VIF
print(vif)
corrplot(cor(state_data_new[, -1]), method="circle", type="upper", tl.col="black", tl.srt=45)
library(corrplot)
corrplot(cor(state_data_new[, -1]), method="circle", type="upper", tl.col="black", tl.srt=45)
# print VIF
View(print(vif))
#Final lm
final_lm <- lm(Amount.of.Hydrogencarbonate ~ log_SDP + Ginni.Index + sdp2 + MarginOfVictory + HDI + literacyRate + Poverty_Literacy + Literacy_HDI, data = state_data_new)
# Print the summary of the new regression model
summary(final_lm)
#Final lm
final_lm <- lm(Amount.of.Hydrogencarbonate ~ log_SDP + Ginni.Index + sdp2 + MarginOfVictory + percentagePoverty + HDI + literacyRate + Poverty_Literacy + Literacy_HDI, data = state_data_new)
# Print the summary of the new regression model
summary(final_lm)
#Final lm
final_lm <- lm(Amount.of.Hydrogencarbonate ~ log_SDP + Ginni.Index + sdp2 + sdp3 + MarginOfVictory + percentagePoverty + HDI + literacyRate + Poverty_Literacy + Literacy_HDI, data = state_data_new)
# Print the summary of the new regression model
summary(final_lm)
#Final lm
final_lm <- lm(Amount.of.Hydrogencarbonate ~ log_SDP + Ginni.Index + sdp2 + sdp3 + MarginOfVictory+ HDI + literacyRate + Poverty_Literacy + Literacy_HDI, data = state_data_new)
# Print the summary of the new regression model
summary(final_lm)
#Final lm
final_lm <- lm(Amount.of.Hydrogencarbonate ~ log_SDP + Ginni.Index + sdp3 + MarginOfVictory+ HDI + literacyRate + Poverty_Literacy + Literacy_HDI, data = state_data_new)
# Print the summary of the new regression model
summary(final_lm)
#Final lm
final_lm <- lm(Amount.of.Hydrogencarbonate ~ log_SDP + Ginni.Index + sdp2 + sdp3 + MarginOfVictory+ HDI + literacyRate + Poverty_Literacy + Literacy_HDI, data = state_data_new)
# Print the summary of the new regression model
summary(final_lm)
#Final lm
final_lm <- lm(Amount.of.Hydrogencarbonate ~ log_SDP + Ginni.Index + sdp2 + sdp3 + HDI + literacyRate + Poverty_Literacy + Literacy_HDI, data = state_data_new)
# Print the summary of the new regression model
summary(final_lm)
#Final lm
final_lm <- lm(Amount.of.Hydrogencarbonate ~ log_SDP + sdp2 + sdp3 + HDI + literacyRate + Poverty_Literacy + Literacy_HDI, data = state_data_new)
# Print the summary of the new regression model
summary(final_lm)
#Final lm
final_lm <- lm(Amount.of.Hydrogencarbonate ~ log_SDP + Ginni.Index + sdp2 + sdp3 + HDI + literacyRate + Poverty_Literacy + Literacy_HDI, data = state_data_new)
# Print the summary of the new regression model
summary(final_lm)
# Fit the model using maximum likelihood estimation
ml_lm <- glm(Amount.of.Hydrogencarbonate ~ log_SDP + Ginni.Index + sdp2 + sdp3 + HDI + literacyRate + Poverty_Literacy + Literacy_HDI, data = state_data_new, family = gaussian(link = "identity"), control = list(maxit = 1000))
source("~/Desktop/sem4/econometrics/DataAssignmentTwo/dataAssignmentTwo.R", echo=TRUE)
# Print the summary of the model
summary(ml_lm)
install.packages("maxLik")
library(maxLik)
# Define the log-likelihood function
ll <- function(beta, y, x) {
mu <- x %*% beta
-sum(dnorm(y, mu, exp(beta[length(beta)]), log = TRUE))
}
# Estimate the parameters using MLE
fit <- maxLik(ll, start = rep(0, 9), y = state_data_new$Amount.of.Hydrogencarbonate,
x = as.matrix(state_data_new[, c("log_SDP", "Ginni.Index", "sdp2", "sdp3", "HDI", "literacyRate", "Poverty_Literacy", "Literacy_HDI", "const")]))
# Estimate the parameters using MLE
fit <- maxLik(ll, start = rep(0, 9), y = state_data_new$Amount.of.Hydrogencarbonate,
x = as.matrix(state_data_new[, c("log_SDP", "Ginni.Index", "sdp2", "sdp3", "HDI", "literacyRate", "Poverty_Literacy", "Literacy_HDI")]))
write.csv(state_data_new, "finalStateData.csv", row.names = FALSE)
finalDataSet <- read.csv("/home/ashu/Desktop/sem4/econometrics/DataAssignmentTwo/finalStateData.csv")
#Convert NA to Missing
finalDataSet$Amount.of.Hydrogencarbonate[is.na(finalDataSet$Amount.of.Hydrogencarbonate)] <- ""
#Convert to Numeric
finalDataSet$Amount.of.Hydrogencarbonate <-as.numeric(finalDataSet$Amount.of.Hydrogencarbonate)
North_States <- c("Jammu And Kashmir","Himachal Pradesh","Delhi","Punjab","Haryana","Rajasthan","Uttarakhand","Chandigarh","Uttar Pradesh")
South_States <- c("Kerala","Andhra Pradesh","Tamil Nadu","Telangana","Pondicherry","Karnataka")
East_States <- c("Assam","Manipur","Tripura","Sikkim","West Bengal","Odisha","Andaman And Nicobar Islands","Arunachal Pradesh","Bihar","Nagaland","Meghalaya","Mizoram")
West_States <- c("Gujarat","Maharashtra","Goa")
Central_States <- c("Madhya Pradesh","Chhattisgarh","Jharkhand")
# create a new column indicating the state_group of each state
finalDataSet$state_group <- NA
finalDataSet$state_group[finalDataSet$State %in% North_States] <- "North"
finalDataSet$state_group[finalDataSet$State %in% South_States] <- "South"
finalDataSet$state_group[finalDataSet$State %in% West_States] <- "West"
finalDataSet$state_group[finalDataSet$State %in% East_States] <- "East"
finalDataSet$state_group[finalDataSet$State %in% Central_States] <- "Central"
library(dbplyr)
# subset data by state-groups
south_data <- finalDataSet %>% filter(state_group == "South")
# subset data by state-groups
south_data <- finalDataSet %>% filter(state_group == "South")
# subset data by state-groups
south_data <- finalDataSet %>% filter(finalDataSet$state_group == "South")
north_data <- finalDataSet %>% filter(finalDataSet$state_group == "North")
east_data <- finalDataSet %>% filter(finalDataSet$state_group == "East")
west_data <- finalDataSet %>% filter(finalDataSet$state_group == "West")
central_data <- finalDataSet %>% filter(finalDataSet$state_group == "Central")
bartlett.test(Amount.of.Hydrogencarbonate ~ state_groups, data = finalDataSet)
bartlett.test(Amount.of.Hydrogencarbonate ~ state_group, data = finalDataSet)
install.packages("plm")
install.packages("lmtest")
View(initialData)
initialData <- read.csv("/home/ashu/Desktop/sem4/econometrics/DataAssignmentTwo/initialData.csv")
View(initialData)
initialData <- read.csv("/home/ashu/Desktop/sem4/econometrics/DataAssignmentTwo/initialData.csv")
View(initialData)
